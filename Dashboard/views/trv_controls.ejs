<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <title>TRV Controls</title>
    <style>
        #gauge {
            position: relative;
            width: 300px;
            height: 300px;
            background: #fff;
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #major-ticks {
            position: absolute;
            width: 100%;
            height: 100%;
            padding: 5px;
        }

        #major-ticks span {
            position: absolute;
            font-size: 0.7em;
            color: #afafaf;
        }

        #major-ticks span:nth-child(1) {
            top: 50%;
            transform: translateY(-50%);
        }

        #major-ticks span:nth-child(2) {
            left: 50%;
            transform: translateX(-50%);
        }

        #major-ticks span:nth-child(3) {
            top: 50%;
            right: 5px;
            transform: translateY(-50%);
        }

        #minor-ticks {
            position: absolute;
            width: 80%;
            height: 80%;
            background: #fff;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        #minor-ticks span {
            position: absolute;
            width: 100%;
            height: 1px;
            border-top: 1px solid #afafaf;
            transform: rotate(calc((var(--i) - 1) * 9 * 1deg));
        }

        #minor-ticks::after {
            content: '';
            position: absolute;
            width: 93%;
            height: 93%;
            background: #fff;
            border-radius: 50%;
        }

        #minor-ticks-bottom-mask {
            position: absolute;
            width: 80%;
            height: 49%;
            bottom: 0;
            background: #fff;
        }

        #bottom-circle {
            position: absolute;
            width: 70%;
            height: 70%;
            background: linear-gradient(#efefef, #ffffff);
            border-radius: 50%;
            box-shadow: inset 0 5px 5px #e7e7e7;
        }

        svg {
            position: absolute;
        }

        svg path {
            transition: 1s;
        }

        #center-circle {
            position: absolute;
            width: 170px;
            height: 170px;
            background: linear-gradient(180deg, #ffffff 0%, #e7ecf1 100%);
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0px 10px 10px rgba(0, 0, 0, 0.1);
        }

        #center-circle::before {
            content: '';
            position: absolute;
            width: 145px;
            height: 145px;
            background: linear-gradient(0deg, #ffffff 0%, #e7ecf1 100%);
            border-radius: 50%;
        }

        #name {
            position: absolute;
            font-size: 1em;
            color: #7f7f7f;
            font-weight: 700;
            top: 40px;
        }

        #center-circle img {
            position: absolute;
            width: 30px;
            height: 30px;
            bottom: 20px;
        }

        #temperature {
            position: absolute;
            font-size: 3em;
            color: #afafaf;
        }

        #valve {
            position: absolute;
            font-size: 3em;
            color: #afafaf;
        }

        #range {
            position: absolute;
            width: 80%;
            bottom: 10px;
        }

        #range_valve {
            position: absolute;
            width: 80%;
            bottom: 10px;
        }
    </style>
</head>


<body class="bg-light text-dark">
    <div class="container mx-auto">
        <h1>TRV Controls</h1>
        <div class="row row-gap-3 justify-content-center align-items-center">
            <div class="col-sm-4">
                <div class="card" id="gauge">
                    <div id="major-ticks">
                        <span>4℃</span>
                        <span>17.5℃</span>
                        <span>31℃</span>
                    </div>
                    <div id="minor-ticks">
                        <span title="--i:1"></span>
                        <span title="--i:2"></span>
                        <span title="--i:3"></span>
                        <span title="--i:4"></span>
                        <span title="--i:5"></span>
                        <span title="--i:6"></span>
                        <span title="--i:7"></span>
                        <span title="--i:8"></span>
                        <span title="--i:9"></span>
                        <span title="--i:10"></span>
                        <span title="--i:11"></span>
                        <span title="--i:12"></span>
                        <span title="--i:13"></span>
                        <span title="--i:14"></span>
                        <span title="--i:15"></span>
                        <span title="--i:16"></span>
                        <span title="--i:17"></span>
                        <span title="--i:18"></span>
                        <span title="--i:19"></span>
                        <span title="--i:20"></span>
                        <span title="--i:21"></span>
                        <span title="--i:22"></span>
                        <span title="--i:23"></span>
                        <span title="--i:24"></span>
                        <span title="--i:25"></span>
                        <span title="--i:26"></span>
                        <span title="--i:27"></span>
                    </div>
                    <div id="minor-ticks-bottom-mask"></div>
                    <div id="bottom-circle"></div>
                    <svg version="1.1" baseProfile="full" width="190" height="190" xmlns="http://www.w3.org/2000/svg">
                        <linearGradient id="gradient" x1="0" x2="1" y1="0" y2="0">
                            <stop offset="0%" stop-color="#b96e85" />
                            <stop offset="100%" stop-color="#ae69bb" />
                        </linearGradient>
                        <path d="M5 95 A80 80 0 0 1 185 95" stroke=url(#gradient) fill="none" stroke-width="10"
                            stroke-linecap="round" stroke-dasharray="0 282.78" />
                    </svg>
                    <div id="center-circle">
                        <span id="name">HEATING</span>
                        <span id="temperature">18</span>

                    </div>
                    <input type="range" id="range" max="31" min="4" value="17" oninput="temp_change()"
                        onmouseup="sendNumber('<%= device_id %>', '<%= gateway_uuid %>', '/settings/thermostats/0?target_t=')">
                </div>
            </div>
            <div class="col-sm-4">
                <div class="card" id="gauge">
                    <div id="major-ticks">
                        <span>0%</span>
                        <span>50%</span>
                        <span>100%</span>
                    </div>
                    <div id="minor-ticks">
                        <% for( let index=1; index < 100; index++ ) { %>
                            <span title="--i:<%=index%>"></span>

                            <% } %>

                    </div>
                    <div id="minor-ticks-bottom-mask"></div>
                    <div id="bottom-circle"></div>
                    <svg version="1.1" baseProfile="full" width="190" height="190" xmlns="http://www.w3.org/2000/svg">
                        <linearGradient id="gradient" x1="0" x2="1" y1="0" y2="0">
                            <stop offset="0%" stop-color="#b96e85" />
                            <stop offset="100%" stop-color="#ae69bb" />
                        </linearGradient>
                        <path id="path_valve" d="M5 95 A80 80 0 0 1 185 95" stroke=url(#gradient) fill="none"
                            stroke-width="10" stroke-linecap="round" stroke-dasharray="0 282.78" />
                    </svg>
                    <div id="center-circle">
                        <span id="name">VALVE POSITION</span>
                        <span id="valve">50</span>

                    </div>
                    <input type="range" id="range_valve" max="100" min="0" value="50" oninput="valve_change()"
                        onmouseup="sendNumber('<%= device_id %>', '<%= gateway_uuid %>', '/thermostats/0?pos=')">
                </div>
            </div>
        </div>
        <div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-2">

        </div>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script>
        function showToast(message) {
            var toastContainer = document.getElementById('toastContainer');
            var toast = document.createElement('div');
            toast.className = 'toast';
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            var toastContent = document.createElement('div');
            toastContent.className = 'd-flex';
            var closeButton = document.createElement('button');
            closeButton.type = 'button';
            closeButton.className = 'btn-close me-2 m-auto';
            closeButton.setAttribute('data-bs-dismiss', 'toast');
            closeButton.setAttribute('aria-label', 'Close');
            var toastBody = document.createElement('div');
            toastBody.className = 'toast-body';
            toastBody.textContent = message;
            toastContent.appendChild(toastBody);
            toastContent.appendChild(closeButton);
            toast.appendChild(toastContent);
            toastContainer.appendChild(toast);
            var toastInstance = new bootstrap.Toast(toast);
            toastInstance.show();
        }

        function checkStatus(response) {
            if (!response.ok) {
                return response.text().then(errorMessage => {
                    throw new Error(errorMessage);
                });
            }
            return response;
        }

        function sendNumber(device_id, gateway_uuid, action_endpoint) {
            // console.log(device_id, gateway_uuid, action_endpoint)
            const inputField = event.target;
            const value = inputField.value;
            const button = event.target;
            inputField.disabled = true;

            fetch('/mqtt_to_http', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ url: `http://${device_id}.local${action_endpoint}${value}`, gateway_uuid: gateway_uuid })
            }).then(checkStatus).then(response => response.json()).then(data => {
                console.log(data);
                showToast(`Successfully set the value to ${value}`)
            }).catch(error => {
                console.error(error);
                showToast(error);
            }).finally(() => {
                inputField.disabled = false; // Enable the button again
            });

        }
        const arc = document.querySelector("svg path");
        const temperature = document.getElementById("temperature");
        const range = document.getElementById("range");

        function temp_change() {
            temperature.textContent = range.value;
            const arc_length = arc.getTotalLength();
            const step = arc_length / (range.max - range.min);
            const value = (range.value - range.min) * step;
            arc.style.strokeDasharray = `${value} ${arc_length - value}`;
        }
        const arc_valve = document.getElementById('path_valve')
        const valve = document.getElementById("valve");
        const range_valve = document.getElementById("range_valve");
        function valve_change() {
            valve.textContent = range_valve.value;
            const arc_length = arc_valve.getTotalLength();
            const step = arc_length / (range_valve.max - range_valve.min);
            const value = (range_valve.value - range_valve.min) * step;
            arc_valve.style.strokeDasharray = `${value} ${arc_length - value}`;
        }
        // updateGauge();
        temp_change();
        valve_change();
    </script>
</body>

</html>