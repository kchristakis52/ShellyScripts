<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

  <title>Devices</title>
  <!-- <style>
    button {
      padding: 8px 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #45a049;
    }

    .switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 34px;
    }

    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      -webkit-transition: .4s;
      transition: .4s;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      -webkit-transition: .4s;
      transition: .4s;
    }

    input:checked+.slider {
      background-color: #2196F3;
    }

    input:focus+.slider {
      box-shadow: 0 0 1px #2196F3;
    }

    input:checked+.slider:before {
      -webkit-transform: translateX(26px);
      -ms-transform: translateX(26px);
      transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
      border-radius: 34px;
    }

    .slider.round:before {
      border-radius: 50%;
    }
  </style> -->
  <style>
    /* Custom CSS for circular button */
    .btn-circle {
      width: 30px;
      height: 30px;
      padding: 6px 0px;
      border-radius: 15px;
      text-align: center;
      font-size: 12px;
      line-height: 1.42857;
    }
  </style>
</head>

<body class="bg-light text-dark">
  <div class="container mx-auto">
    <h1>Devices</h1>
    <div class="row row-gap-3">
      <% for (let i=0; i < devices.length; i++) { %>
        <div class="col-sm-4">
          <div class="card text-center" style="width: 18rem;">
            <div class="card-body">
              <h5 class="card-title">
                <%= devices[i].device_name %>
              </h5>
            </div>
            <div class="card-footer">
              <% if (devices[i].device_type==='plug' ) { %>
                <button type="button" class="btn btn-primary btn-circle btn-lg"
                  onclick="toggleSwitch('<%= devices[i].device_id %>', '<%= devices[i].gateway_uuid %>', '<%= devices[i].actions[0].action_endpoint %>', '<%= devices[i].device_name %>' )">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-power"
                    viewBox="0 0 16 16">
                    <path d="M7.5 1v7h1V1z" />
                    <path
                      d="M3 8.812a5 5 0 0 1 2.578-4.375l-.485-.874A6 6 0 1 0 11 3.616l-.501.865A5 5 0 1 1 3 8.812" />
                  </svg>
                </button>

                <% } else if (devices[i].device_type==='trv' ) { %>
                  <button type="button" class="btn btn-primary"
                    onclick="getDeviceControls('<%= devices[i].device_id %>', '<%= devices[i].gateway_uuid %>', '<%= devices[i].device_type %>')">
                    Device Controls
                  </button>
                  <% } %>
                    <button type="button" class="btn btn-primary"
                      onclick="getDeviceData('<%= devices[i].device_id %>', '<%= devices[i].gateway_uuid %>')">
                      <%= "Device data" %>
                    </button>
            </div>
          </div>
        </div>
        <% } %>
    </div>
    <div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-2">

    </div>

  </div>



  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
    crossorigin="anonymous"></script>
  <script>
    function checkStatus(response) {
      if (!response.ok) {
        throw new Error(response.statusText);
      }
      return response;
    }

    function showToast(message) {
      var toastContainer = document.getElementById('toastContainer');
      var toast = document.createElement('div');
      toast.className = 'toast';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      var toastContent = document.createElement('div');
      toastContent.className = 'd-flex';
      var closeButton = document.createElement('button');
      closeButton.type = 'button';
      closeButton.className = 'btn-close me-2 m-auto';
      closeButton.setAttribute('data-bs-dismiss', 'toast');
      closeButton.setAttribute('aria-label', 'Close');
      var toastBody = document.createElement('div');
      toastBody.className = 'toast-body';
      toastBody.textContent = message;
      toastContent.appendChild(toastBody);
      toastContent.appendChild(closeButton);
      toast.appendChild(toastContent);
      toastContainer.appendChild(toast);
      var toastInstance = new bootstrap.Toast(toast);
      toastInstance.show();
    }


    function toggleSwitch(device_id, gateway_uuid, action_endpoint, device_name) {
      const switch_button = event.target;
      switch_button.disabled = true; // Disable the switch_button to prevent multiple clicks

      fetch('/mqtt_to_http', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ url: `http://${device_id}.local${action_endpoint}`, gateway_uuid: gateway_uuid })
      }).then(checkStatus).then(response => response.json()).then(data => {
        console.log(data);
        if (data.ison) {
          switch_button.checked = true;
          showToast(`${device_name} is turned on`);
        } else {
          switch_button.checked = false;

          showToast(`${device_name} is turned off`);
        }
      }).catch(error => {
        console.error('Error:', error);
        showToast(`Error: ${error}`);
      }).finally(() => {
        switch_button.disabled = false;
      });
    }

    function preventCheckboxCheck(event, device_id, gateway_uuid, action_endpoint) {
      event.preventDefault();
      toggleSwitch(device_id, gateway_uuid, action_endpoint);
    }

    function getDeviceControls(device_id, gateway_uuid, device_type) {
      window.location.href = '/device_controls?device_id=' + device_id + '&gateway_uuid=' + gateway_uuid + '&device_type=' + device_type;
    }

    function getDeviceData(device_id, gateway_uuid) {
      const headers = { type: 'application/json' };
      const data = JSON.stringify({ url: "sendData", gateway_uuid: gateway_uuid });
      const blob = new Blob([data], headers);
      navigator.sendBeacon('/mqtt_to_http', blob);

      window.location.href = '/device_data?device_id=' + device_id + '&gateway_uuid=' + gateway_uuid;
    }
  </script>
</body>

</html>