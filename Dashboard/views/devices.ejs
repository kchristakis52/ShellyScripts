<!DOCTYPE html>
<html>

<head>
  <title>Devices</title>
  <style>
    button {
      padding: 8px 16px;
      background-color: #4CAF50;
      color: white;
      border: none;
      cursor: pointer;
    }

    button:hover {
      background-color: #45a049;
    }

    /* The switch - the box around the slider */
    .switch {
      position: relative;
      display: inline-block;
      width: 60px;
      height: 34px;
    }

    /* Hide default HTML checkbox */
    .switch input {
      opacity: 0;
      width: 0;
      height: 0;
    }

    /* The slider */
    .slider {
      position: absolute;
      cursor: pointer;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: #ccc;
      -webkit-transition: .4s;
      transition: .4s;
    }

    .slider:before {
      position: absolute;
      content: "";
      height: 26px;
      width: 26px;
      left: 4px;
      bottom: 4px;
      background-color: white;
      -webkit-transition: .4s;
      transition: .4s;
    }

    input:checked+.slider {
      background-color: #2196F3;
    }

    input:focus+.slider {
      box-shadow: 0 0 1px #2196F3;
    }

    input:checked+.slider:before {
      -webkit-transform: translateX(26px);
      -ms-transform: translateX(26px);
      transform: translateX(26px);
    }

    /* Rounded sliders */
    .slider.round {
      border-radius: 34px;
    }

    .slider.round:before {
      border-radius: 50%;
    }

    .card {
      /* Add shadows to create the "card" effect */
      box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
      transition: 0.3s;
      border-radius: 5px;

    }

    /* On mouse-over, add a deeper shadow */
    .card:hover {
      box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
    }

    /* Add some padding inside the card container */
    .container {
      padding: 2px 16px;
    }

    /* Add flex for card container */
    .card-container {
      display: flex;
      flex-wrap: wrap;
      justify-content: space-between;
      align-items: center;
    }
  </style>
</head>

<body>
  <div class="card-container">
    <% for (let i=0; i < devices.length; i++) { %>
      <div class="card">
        <div class="container">
          <h4><b>
              <%= devices[i].device_name %>
            </b>
          </h4>
          <% if (devices[i].device_type==='plug' ) { %>
            <label class="switch">
              <input type="checkbox"
                onclick="preventCheckboxCheck(event, '<%= devices[i].device_id %>', '<%= devices[i].gateway_uuid %>', '<%= devices[i].actions[0].action_endpoint %>')">
              <span class="slider round"></span>
            </label>
            <% } else if (devices[i].device_type==='trv' ) { %>
              <button
                onclick="getDeviceControls('<%= devices[i].device_id %>', '<%= devices[i].gateway_uuid %>', '<%= devices[i].device_type %>')">
                Device Controls
              </button>
              <% } %>
                <button onclick="getDeviceSensors('<%= devices[i].device_id %>', '<%= devices[i].gateway_uuid %>')">
                  <%= "Device data" %>
                </button>
        </div>
      </div>
      <% } %>
  </div>

  <script>
    function checkStatus(response) {
      if (!response.ok) {
        throw new Error(response.statusText);
      }
      return response;
    }

    function toggleSwitch(device_id, gateway_uuid, action_endpoint) {
      const switch_button = event.target;
      switch_button.disabled = true; // Disable the switch_button to prevent multiple clicks

      fetch('/mqtt_to_http', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ url: `http://${device_id}.local${action_endpoint}`, gateway_uuid: gateway_uuid })
      }).then(checkStatus).then(response => response.json()).then(data => {
        console.log(data);
        if (data.ison) {
          switch_button.checked = true;
        } else {
          switch_button.checked = false;
        }
      }).catch(error => {
        console.error('Error:', error);
      }).finally(() => {
        switch_button.disabled = false; // Enable the switch_button again
      });
    }

    function preventCheckboxCheck(event, device_id, gateway_uuid, action_endpoint) {
      event.preventDefault();
      toggleSwitch(device_id, gateway_uuid, action_endpoint);
    }

    function getDeviceControls(device_id, gateway_uuid, device_type) {
      window.location.href = '/device_controls?device_id=' + device_id + '&gateway_uuid=' + gateway_uuid + '&device_type=' + device_type;
    }

    function getDeviceSensors(device_id, gateway_uuid) {
      const headers = { type: 'application/json' };
      const data = JSON.stringify({ url: "sendData", gateway_uuid: gateway_uuid });
      const blob = new Blob([data], headers);
      navigator.sendBeacon('/mqtt_to_http', blob);

      window.location.href = '/device_sensors?device_id=' + device_id + '&gateway_uuid=' + gateway_uuid;
    }
  </script>
</body>

</html>